var model = {
    python: {
        char: 'S', //"üò∏",
        dir: 1,
        coords: [
            // [0, 9],
            // [0, 8],
            // [0, 7],
            // [0, 6],
            // [0, 5],
            // [0, 4],
            // [0, 3],
            [0, 2],
            [0, 1],
            [0, 0]
        ],
        eatenRuby: []
    },
    ruby: {
        char: '‚ï¨', //"üÇΩ",
        coords: [10, 10]
    },
    field: {
        width: 60,
        height: 10,
        text: ''
    },
    move: function () {
        //console.log("move");
        var headCoord = this.python.coords[0].slice();
        if (this.python.dir === 0) {
            //–≤–≤–µ—Ä—Ö
            headCoord[0] = headCoord[0] === 0 ? this.field.height - 1 : headCoord[0] - 1;
        } else if (this.python.dir === 1) {
            //–≤–ø—Ä–∞–≤–æ
            headCoord[1] = headCoord[1] === this.field.width - 1 ? 0 : headCoord[1] + 1;
        } else if (this.python.dir === 2) {
            //–≤–Ω–∏–∑
            headCoord[0] = headCoord[0] === this.field.height - 1 ? 0 : headCoord[0] + 1;
        } else if (this.python.dir === 3) {
            //–≤–ª–µ–≤–æ
            headCoord[1] = headCoord[1] === 0 ? this.field.width - 1 : headCoord[1] - 1;
        }
        // –∑–∞–ø–æ–º–Ω–∏–º —Ö–≤–æ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        var tail = this.python.coords[this.python.coords.length - 1].slice();
        //–æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Å—Ç–∏—Ç—å
        for (var i = this.python.coords.length - 2; i >= 0; i--) {
            //console.log(("Copy " + i) + " (" + this.python.coords[i] +") to " + (i+1) + " (" + this.python.coords[i + 1] + ")") ;
            this.python.coords[i + 1] = this.python.coords[i].slice();
        }
        this.python.coords[0] = headCoord;

        // –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–µ —Ä—É–±–∏–Ω—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –ª–µ–≥–∫–æ —É–¥–∞–ª—è—Ç—å)
        //console.log("===========–°—ä–µ–¥–µ–Ω–Ω—ã—Ö: " + this.python.eatenRuby.length);
        for (var i = this.python.eatenRuby.length - 1; i >= 0; i--) {
            //console.log("–°—ä–µ–¥–µ–Ω–Ω—ã–π: " + i);
            //console.log("–î–ª–∏–Ω–∞: " + this.python.coords.length);
            if (this.python.eatenRuby[i] === this.python.coords.length) {
                // –∏–∑ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–∏—Ç–æ–Ω–∞
                this.python.coords.push(tail);
                this.python.eatenRuby.splice(i, 1);
            } else {
                this.python.eatenRuby[i]++;
            }
        }

        // –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –Ω–µ –≤—Ä–µ–∑–∞–ª–∏—Å—å (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ–ø–∞–ª–∏)
        for (var i = 0; i < this.python.coords.length - 2; i++) {
            for (var j = i + 1; j < this.python.coords.length - 1; j++) {
                if (this.python.coords[i][0] === this.python.coords[j][0] && this.python.coords[i][1] === this.python.coords[j][1]) {
                    this.gameover();
                }
            }
        }

        // –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å—ä–µ–ª–∏ –Ω–æ–≤—ã–π —Ä—É–±–∏–Ω
        if (headCoord[0] === this.ruby.coords[0] && headCoord[1] === this.ruby.coords[1]) {
            // "—Å—ä–µ—Å—Ç—å" —Ç–µ–∫—É—â–∏–π
            this.python.eatenRuby.push(0); //–Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
            this.ruby.coords = this.generateNewRuby(this.python.coords);
        }
        view.render(this.python, this.ruby, this.field.text);
    },
    generateNewRuby: function (pythonCoords) {
        var w, h;
        do {
            w = Math.floor(Math.random() * this.field.width);
            h = Math.floor(Math.random() * this.field.height);
        } while (this.checkRuby(w, h, pythonCoords));
        return [h, w];
    },
    checkRuby: function (w, h, pythonCoords) {
        //–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä—É–±–∏–Ω–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –ø–∏—Ç–æ–Ω–æ–º
        for (var i = 0; i < pythonCoords.length; i++) {
            if (pythonCoords[i][0] === h && pythonCoords[i][1] === w) {
                return true;
            }
        }
        return false;
    },
    init: function (text) {
        this.field.text = text;
        this.field.height = text.split('\n').length - 1; //–ü–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –ø–æ–∫–∞ –Ω–µ –±–µ—Ä–µ–º, —Ç.–∫. –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –ø–æ–ª–Ω–∞—è.
        view.render(this.python, this.ruby, this.field.text);
    },
    left: function () {
        this.python.dir--;
        if (this.python.dir === -1) {
            this.python.dir = 3;
        }
    },
    rigth: function () {
        this.python.dir++;
        if (this.python.dir === 4) {
            this.python.dir = 0;
        }
    },
    gameover: function () {
        controller.gameover();
        view.gameover();
    }

};


var view = {
    pythonView: {
        horz: '‚ïê',
        vert: '‚ïë',
        tango: {
            forward: '‚ïî',
            backward: '‚ïù'
        },
        waltz: {
            forward: '‚ïó',
            backward: '‚ïö'
        },
        getPythonChar: function (python, i) {
            // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–∏—Ç–æ–Ω–∞
            var char = this.horz;
            if (i === 0) {
                // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ –≤—Ç–æ—Ä—ã–º
                char = python.coords[0][0] === python.coords[1][0] ? this.horz : this.vert;
            } else if (i === python.coords.length - 1) {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
                char = python.coords[i - 1][0] === python.coords[i][0] ? this.horz : this.vert;
            } else {
                // –°—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞–¥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π
                if (python.coords[i - 1][0] === python.coords[i + 1][0]) {
                    char = this.horz;
                } else if (python.coords[i - 1][1] === python.coords[i + 1][1]) {
                    char = this.vert;
                } else {
                    // –≠—Ç–æ —É–≥–ª–æ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç. –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–∏–∞–≥–æ–Ω–∞–ª—å –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏ —Å–ª–µ–¥—É—é—â–∏–º.  –ü—Ä–∞–≤–∞—è - "—Ç–∞–Ω–≥–æ", –ª–µ–≤–∞—è - "–≤–∞–ª—å—Å".
                    // –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ, –∞ –∫–∞–∫–æ–π –≤—ã—à–µ.
                    var upper;
                    var lower;
                    if (python.coords[i - 1][0] < python.coords[i + 1][0]) {
                        upper = i - 1;
                        lower = i + 1;
                    } else {
                        upper = i + 1;
                        lower = i - 1;
                    }
                    // –ï—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1, —Ç–æ —ç—Ç–æ –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫—Ä–∞–π –∏ –Ω–∞–¥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–æ–±–æ—Ä–æ—Ç.
                    if (python.coords[lower][0] - python.coords[upper][0] !== 1) {
                        upper = upper + lower;
                        lower = upper - lower;
                        upper = upper - lower;
                    }
                    // –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤–µ–µ –∏–ª–∏ –ª–µ–≤–µ–µ (–ø—Ä–∞–≤–µ–µ - "—Ç–∞–Ω–≥–æ", –ª–µ–≤–µ–µ - "–≤–∞–ª—å—Å").
                    var diagonale = python.coords[upper][1] < python.coords[lower][1] ? 'waltz' : 'tango';
                    // –ï—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1, —Ç–æ —ç—Ç–æ –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫—Ä–∞–π –∏ –Ω–∞–¥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–æ–±–æ—Ä–æ—Ç.
                    if (Math.abs(python.coords[upper][1] - python.coords[lower][1]) !== 1) {
                        if (diagonale === 'waltz') {
                            diagonale = 'tango';
                        } else {
                            diagonale = 'waltz';
                        }
                    }
                    var dance = diagonale === 'waltz' ? this.waltz : this.tango;
                    // –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–∞–Ω—Ü–∞ - "–≤–ø–µ—Ä–µ–¥" –∏–ª–∏ "–Ω–∞–∑–∞–¥".
                    // –ï—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, —Ç–æ —ç—Ç–æ "–≤–ø–µ—Ä–µ–¥"
                    char = python.coords[upper][0] === python.coords[i][0] ? dance.forward : dance.backward;
                }
            }
            if (python.eatenRuby.indexOf(i) !== -1) {
                // –û–±–æ–∑–Ω–∞—á–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å—ä–µ–¥–µ–Ω–Ω—ã–º —Ä—É–±–∏–Ω–æ–º
                return '<span style="color: #ff0000">' + char + '</span>';
            } else {
                return '<span style="color: #00ff00">' + char + '</span>';
            }
        }
    },

    matrixToText: function (matrix) {
        // console.log(typeof matrix);
        for (var i = 0; i < matrix.length; i++) {
            matrix[i] = matrix[i].join('');
        }
        // console.log(typeof matrix);
        return matrix.join('\n');
    },
    textToMatrix: function (text) {
        var matrix = text.split('\n');
        for (var i = 0; i < matrix.length; i++) {
            matrix[i] = matrix[i].split('');
        }
        return matrix;
    },
    /**
     *
     * @param python
     * @param ruby
     * @param text
     */
    render: function (python, ruby, text) {
        //TODO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ–ª–µ –≤–æ view, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª–∏. –¢.–∫. —ç—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ "—Å–∫–∏–Ω"
        // –†–∞–∑–æ–±—å–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤
        textMatrix = this.textToMatrix(text);
        // –æ–±–æ–∑–Ω–∞—á–∏—Ç—å python
        for (var i = 0; i < python.coords.length; i++) {
            textMatrix[python.coords[i][0]][python.coords[i][1]] = this.pythonView.getPythonChar(python, i);
        }
        // –æ–±–æ–∑–Ω–∞—á–∏—Ç—å ruby
        textMatrix[ruby.coords[0]][ruby.coords[1]] = '<span style="color: #ff0000">' + ruby.char + '</span>';
        // –Ω–∞–π—Ç–∏ pre –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        document.getElementById('textField').innerHTML = this.matrixToText(textMatrix);
    },
    gameover: function () {
        // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—Å—Ç, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        alert('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã');
    }
};

var controller = {
    timer: '',
    init: function () {
        this.timer = setInterval(this.moveTimer, 200);
    },
    moveTimer: function () {
        model.move();
    },
    gameover: function () {
        clearTimeout(this.timer);
    }
};

window.onload = init;

function init() {
    model.init(document.getElementById('field').innerHTML);
    controller.init();
    document.getElementById('field').onclick = changeDirection;
}

function changeDirection() {
    model.rigth();
}

function left() {
    model.left();
}

function rigth() {
    model.rigth();
}


// replaceCharAt: function(text, position, char) {
//     return text.substr(0, position) + char + text.substr(position + 1);
// },


// //textMatrix: [],
// markAtCoord: function(text, coord, char) {
//     return replaceCharAt(text, findPosition(text, coord), char);
// },

//     findPosition: function(text, coord) {
//     var position = 0;
//     // —Ä–∞–∑–¥–µ–ª–∏–º –Ω–∞ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
//     var strings = text.split("\n");
//     for (var i = 0; i < coord[0]; i++) {
//         position = position + strings[i].length + 1; // +1 —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
//     }
//     position = position + coord[1];
//     return position;
// },
